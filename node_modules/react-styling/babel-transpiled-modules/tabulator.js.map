{"version":3,"sources":["../source/tabulator.js"],"names":[],"mappings":"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","file":"tabulator.js","sourcesContent":["import { starts_with, is_blank, repeat } from './helpers'\r\n\r\n// tabulation utilities\r\nexport default class Tabulator\r\n{\r\n\tconstructor(tab)\r\n\t{\r\n\t\tthis.tab = tab\r\n\t}\r\n\r\n\t// remove some tabs in the beginning\r\n\treduce_indentation(line, how_much)\r\n\t{\r\n\t\treturn line.substring(this.tab.symbol.length * how_much)\r\n\t}\r\n\r\n\t// how many \"tabs\" are there before content of this line\r\n\tcalculate_indentation(line)\r\n\t{\r\n\t\tconst matches = line.match(this.tab.regexp)\r\n\r\n\t\tif (!matches || matches[0] === '')\r\n\t\t{\r\n\t\t\treturn 0\r\n\t\t}\r\n\r\n\t\treturn matches[0].length / this.tab.symbol.length\r\n\t}\r\n\r\n\textract_tabulation(lines)\r\n\t{\r\n\t\tlines = lines\r\n\t\t\t// preserve line indexes\r\n\t\t\t.map((line, index) =>\r\n\t\t\t{\r\n\t\t\t\tindex++\r\n\t\t\t\treturn { line, index }\r\n\t\t\t})\r\n\t\t\t// filter out blank lines\r\n\t\t\t.filter(line => !is_blank(line.line))\r\n\r\n\t\t// calculate each line's indentation\r\n\t\tlines.forEach(line => \r\n\t\t{\r\n\t\t\tconst tabs = this.calculate_indentation(line.line)\r\n\t\t\tconst pure_line = this.reduce_indentation(line.line, tabs)\r\n\r\n\t\t\t// check for messed up space indentation\r\n\t\t\tif (starts_with(pure_line, ' '))\r\n\t\t\t{\r\n\t\t\t\tlet reason\r\n\t\t\t\tif (this.tab.symbol === '\\t')\r\n\t\t\t\t{\r\n\t\t\t\t\treason = 'mixed tabs and spaces'\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\treason = 'extra leading spaces'\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthrow new Error(`Invalid indentation (${reason}) at line ${line.index}: \"${this.reveal_whitespace(line.line)}\"`)\r\n\t\t\t}\r\n\r\n\t\t\t// check for tabs in spaced intentation\r\n\t\t\tif (starts_with(pure_line, '\\t'))\r\n\t\t\t{\r\n\t\t\t\tthrow new Error(`Invalid indentation (mixed tabs and spaces) at line ${line.index}: \"${this.reveal_whitespace(line.line)}\"`)\r\n\t\t\t}\r\n\r\n\t\t\tline.tabs          = tabs\r\n\t\t\tline.original_line = line.line\r\n\t\t\tline.line          = pure_line\r\n\t\t})\r\n\r\n\t\t// get the minimum indentation level\r\n\t\tconst minimum_indentation = lines\r\n\t\t\t.reduce((minimum, line) => Math.min(minimum, line.tabs), Infinity)\r\n\r\n\t\t// if there is initial tabulation missing - add it\r\n\t\tif (minimum_indentation === 0)\r\n\t\t{\r\n\t\t\tlines.forEach(function(line)\r\n\t\t\t{\r\n\t\t\t\tline.tabs++\r\n\t\t\t})\r\n\t\t}\r\n\t\t// if there is excessive tabulation - trim it\r\n\t\telse if (minimum_indentation > 1)\r\n\t\t{\r\n\t\t\tlines.forEach(function(line)\r\n\t\t\t{\r\n\t\t\t\tline.tabs -= minimum_indentation - 1\r\n\t\t\t})\r\n\t\t}\r\n\r\n\t\t// check for messed up tabulation\r\n\t\tif (lines.length > 0 && lines[0].tabs !== 1)\r\n\t\t{\r\n\t\t\tthrow new Error(`Invalid indentation at line ${lines[0].index}: \"${lines[0].original_line}\"`)\r\n\t\t}\r\n\r\n\t\treturn lines\r\n\t}\r\n\r\n\treveal_whitespace(text)\r\n\t{\r\n\t\tconst whitespace_count = text.length - text.replace(/^\\s*/, '').length\r\n\r\n\t\tconst whitespace = text.substring(0, whitespace_count + 1)\r\n\t\t\t.replace(this.tab.regexp_anywhere, '[indent]')\r\n\t\t\t.replace(/ /g, '[space]')\r\n\t\t\t.replace(/\\t/g, '[tab]')\r\n\r\n\t\tconst rest = text.substring(whitespace_count + 1)\r\n\r\n\t\treturn whitespace + rest\r\n\t}\r\n}\r\n\r\n// decide whether it's tabs or spaces\r\nTabulator.determine_tabulation = function(lines)\r\n{\r\n\tconst substract = pair => pair[0] - pair[1]\r\n\r\n\tfunction is_tabulated(line)\r\n\t{\r\n\t\t// if we're using tabs for tabulation\r\n\t\tif (starts_with(line, '\\t'))\r\n\t\t{\r\n\t\t\tconst tab = \r\n\t\t\t{\r\n\t\t\t\tsymbol: '\\t',\r\n\t\t\t\tregexp: new RegExp('^(\\t)+', 'g'),\r\n\t\t\t\tregexp_anywhere: new RegExp('(\\t)+', 'g')\r\n\t\t\t}\r\n\r\n\t\t\treturn tab\r\n\t\t}\r\n\t}\r\n\r\n\tfunction spaced_tab(tab_width)\r\n\t{\r\n\t\tconst symbol = repeat(' ', tab_width)\r\n\r\n\t\tconst spaced_tab = \r\n\t\t{\r\n\t\t\tsymbol: symbol,\r\n\t\t\tregexp: new RegExp(`^(${symbol})+`, 'g'),\r\n\t\t\tregexp_anywhere: new RegExp(`(${symbol})+`, 'g')\r\n\t\t}\r\n\r\n\t\treturn spaced_tab\r\n\t}\r\n\r\n\tfunction calculate_leading_spaces(line)\r\n\t{\r\n\t\tlet counter = 0\r\n\t\tline.replace(/^( )+/g, function(match) { counter = match.length })\r\n\t\treturn counter\r\n\t}\r\n\r\n\t// take all meaningful lines\r\n\tlines = lines.filter(line => !is_blank(line))\r\n\r\n\t// has to be at least two of them\r\n\tif (lines.length === 0)\r\n\t{\r\n\t\treturn tab\r\n\t\t// throw new Error(`Couldn't decide on tabulation type. Not enough lines.`)\r\n\t}\r\n\r\n\tif (lines.length === 1)\r\n\t{\r\n\t\tconst tab = is_tabulated(lines[0])\r\n\t\tif (tab)\r\n\t\t{\r\n\t\t\treturn tab\r\n\t\t}\r\n\r\n\t\treturn spaced_tab(calculate_leading_spaces(lines[0]))\r\n\t}\r\n\r\n\t// if we're using tabs for tabulation\r\n\tconst tab = is_tabulated(lines[1])\r\n\tif (tab)\r\n\t{\r\n\t\treturn tab\r\n\t}\r\n\r\n\t// take the first two lines,\r\n\t// calculate their indentation,\r\n\t// substract it and you've got the tab width\r\n\tconst tab_width = Math.abs(substract\r\n\t(\r\n\t\tlines\r\n\t\t\t.slice(0, 2)\r\n\t\t\t.map(calculate_leading_spaces)\r\n\t)) \r\n\t|| 1\r\n\r\n\t// if (tab_width === 0)\r\n\t// {\r\n\t// \tthrow new Error(`Couldn't decide on tabulation type. Same indentation.`)\r\n\t// }\r\n\r\n\treturn spaced_tab(tab_width)\r\n}"]}